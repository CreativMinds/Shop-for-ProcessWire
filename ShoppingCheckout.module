<?php

class ShoppingCheckout extends WireData implements Module, ConfigurableModule
{
	public static function getModuleInfo()
	{
		return array(
			'title' => 'Shopping Checkout',
			'version' => 001,
			'summary' => 'Handles checkout process for PW Shop',
			'singular' => false,
			'autoload' => true,
			'requires' => array(
				"ShoppingCart",
				"ShoppingOrdersManagement"
			)
		);
	}
	
	static public function getDefaultData() {
		
		$required = array(
			'visible' => 1,
			'required' => 1
		);
		$visible = array(
			'visible' => 1,
			'required' => 0
		);
		$hidden = array(
			'visible' => 0,
			'required' => 0
		);
				
	    return array(
			
		   'confirmationUrlSegment' => "confirmation",
		   'paymentUrlSegment' 		=> "payment",
		   'completedUrlSegment' 	=> "completed",
		   
		   'fields' => array(
				'firstname' => array(
						'label' 	=> __('First name'),
						'defaults' 	=> $required
				),
				'lastname' => array(
						'label' 	=> __('Last name'),
						'defaults'	=> $required
				),
				'email'	=> array(
						'label'		=> __('Email'),
						'defaults'	=> $required
				),
				'phone'	=> array(
						'label'		=> __('Phone number'),
						'defaults'	=> $visible
				),
				'streetaddress'	=> array(
						'label'		=> __('Street address'),
						'defaults'	=> $required
				),
				'zip' => array(
						'label'		=> __('Zip'),
						'defaults'	=> $hidden
				),
				'city' => array(
						'label'		=> __('City'),
						'defaults'	=> $required
				),
				'country' => array(
						'label'		=> __('Country'),
						'defaults'	=> $hidden
				),
				'greetings' => array(
						'label'		=> __('Details about my order'),
						'defaults'	=> $visible
				),
				'custom1' => array(
						'label'		=> __('Custom field #1'),
						'defaults'	=> $hidden
				),
				'custom2' => array(
						'label'		=> __('Custom field #2'),
						'defaults'	=> $hidden
				)
			)
	    );
	}

	/**
	 * Populate the default config data
	 *
	 * ProcessWire will automatically overwrite it with anything the user has specifically configured.
	 * This is done in construct() rather than init() because ProcessWire populates config data after
	 * construct(), but before init().
	 *
	 */
	public function __construct() {
		$defaultData = self::getDefaultData();
		$fields = $defaultData['fields'];
		unset($defaultData['fields']);
	    foreach($defaultData as $key => $value) {
		   $this->$key = $value;
	    }
		foreach($fields as $key => $arr) {
			if ($arr['defaults']['visible'] == 1) $this->$key = 1;
			if ($arr['defaults']['required'] == 1) {
				$reqKey = $key . 'Required';
				$this->$reqKey = 1;
			}
		}
	}
	
	public function init()
	{
		$data = $this->modules->getModuleConfigData('ShoppingCheckout');
		foreach($data as $key => $value) {
		   $this->$key = $value;
	    }
	}
	
	public function ready()
	{
		$data = $this->modules->getModuleConfigData('ShoppingCheckout');
		foreach($data as $key => $value) {
		   $this->$key = $value;
	    }
	}
	
	/*
	 * Simple controller to handle checkout process. Actually 4 steps:
	 *
	 * 1. renderInformation()
	 * 2. renderConfirmation()
	 * 3. renderPayment()
	 * 4. renderCompleted()
	 *
	 */
	public function renderCheckout()
	{
		$data = $this->modules->getModuleConfigData('ShoppingCheckout');
		foreach($data as $key => $value) {
		   $this->$key = $value;
	    }		
		
		if(!$this->input->urlSegment1) {
			$out = $this->renderInformation();
		}
		else if ($this->input->urlSegment1 == $this->confirmationUrlSegment) {
			$out = $this->renderConfirmation();
		}
		else if ($this->input->urlSegment1 == $this->paymentUrlSegment) {
			$out = $this->renderPayment();
		}
		else if ($this->input->urlSegment1 == $this->completedUrlSegment) {
			$out = $this->renderCompleted();
		}
		
		return $out;
	}
	
	/*
	 * Returns form to ask customer information before proceeding to confirmation.
	 * After valid information redirects to confirmation url.
	 *
	 */
	public function renderInformation() {
		$sid = session_id();
		$order = $this->pages->get("template=sc-order, sc_session={$sid}, status=unpublished, limit=1, sort=-created");
		if ($order->id) {
			$this->session->redirect("./{$this->paymentUrlSegment}/");
		}
		
		if ($this->modules->ShoppingCart->getNumberOfItems() == 0)
			return "<p>" . $this->_("Your shopping cart is empty.") . "</p>";
		
		if (!$this->input->post->submit) {
			$this->validateInformation(false);
		} else {
			$orderArray = $this->validateInformation(true);
			if($orderArray['valid']) {
				$this->session->redirect("./{$this->confirmationUrlSegment}/");	
			}
		}
		
		
		
		
		
		$out = "<h2>" . $this->_("Please provide your shipping address and contact information.") . "</h2>";
		$out .= "<form action='./' method='post'>";
		
		$out .= $this->renderInformationFormItems();
		
		$paymentModules = $this->modules->find('className^=Payment');
		if ($paymentModules->count() > 0) {
			$out .= "<select name='paymentmethod'>";
			foreach($paymentModules as $module) {
				$info = $module->getModuleInfo();
				$selected = ($this->session->orderArray['paymentmethod']['value'] == get_class($module)) ? "selected" : "";
				$out .= "<option $selected value='". get_class($module) ."'>".$info['title']."</option>";
			}
			$out .= "</select>";
			$out .= "<input type='submit' name='submit' value='" . $this->_("Complete the order") . "' />";
			
		} else {
			$out .= "<p>No payment methods installed, you should have at least one</p>";
		}
		
		$out .= "</form>";
		
		return $out;
	}
	
	/*
	 * Returns simple view to review order status before proceeding to payment.
	 *
	 */
	public function renderConfirmation() {
		if ($this->input->post->submit) {
			$this->validateInformation(true); // We still need to validate here
			$this->createOrder();
			$this->session->redirect("../{$this->paymentUrlSegment}/");
		}
		
		$out  = $this->modules->ShoppingCart->renderCart(true);
		$out .= "<form action='./' method='post'>";
		$out .= $this->renderInformationFormItems(true);
		$out .= "<input type='hidden' name='paymentmethod' value='". $this->session->orderArray['paymentmethod']['value'] ."' />";
		$out .= "<input type='submit' name='submit' value='". $this->_("Pay this order") ."' />";
		$out .= "</form>";
		$out .= "<a href='../'>". $this->_("Go back to edit your information") ."</a>";
		
		return $out;
	}
	
	/*
	 * Returns processPayment() method from chosen paymentMethod class.
	 * 
	 */
	public function renderPayment() {
		// Get latest unpublished order from current user
		$sid = session_id();
		$order = $this->pages->get("template=sc-order, sc_session={$sid}, status=unpublished, limit=1, sort=-created");
		$paymentmethod = $this->modules->get("{$order->sc_paymentmethod}");
		return $paymentmethod->processPayment($order);
	}
	
	/*
	 * Simple view after the payent. Renders information about whether the order
	 * was success or not
	 *
	 */
	public function renderCompleted() {
		if (!$this->session->orderId) return "Payment failed, session lost";
		
		$orderId = $this->session->orderId;
		$order = $this->pages->get($orderId);

		if(!$order->id)
			throw new WireExpection("Payment error, order couldn't be found");
		
		if ($order->is(Page::statusUnpublished)) {
			$out = "Payment cancelled or failed!";
			$out .= "<a href='../{$this->paymentUrlSegment}/'>Try again?</a>";
			return $out;
		} else {
			$this->session->remove('orderId');			
			return "Thank you: $order->title !";			
		}
	}
	/*
	 * Return markup for Information form items
	 *
	 * @param boolen $viewOnly false|true if you want to allow customer to edit
	 * information, then use without viewOnly.
	 *
	 * @return string markup
	 *
	 */
	public function renderInformationFormItems($viewOnly = false) {
		
		$out = '';
		foreach($this->session->orderArray['fields'] as $key => $field) {
			
			$reqKey = $key . 'Required';
			
			if ($this->$key) {
				if (!isset($field['type'])) $field['type'] = 'text';
				$class  = ($this->$reqKey) ? 'required' : '';
				$class .= (isset($field['error'])) ? ' error' : '';
				
				$out .= "<div class='$class'><label for='$key'>". $field['label'] .":</label> ";
				if (isset($field['error'])) $out .= "<p class='errormsg'>". $field['error'] ."</p>";
				if (!$viewOnly) {
					switch($field['type']) {
						case "textarea":
							$out .= "<textarea class='$class' name='$key'>". $field['value'] ."</textarea>";
							break;
						default:
							$out .= "<input class='$class' name='$key' value='". $field['value'] ."' />";
					}
				}
				else {
					$out .= "<span>". $field['value'] ."</span>";
					$out .= "<input type='hidden' name='$key' value='". $field['value'] ."' />";
				}
				$out .= "</div>";
			}
		}
		
		return $out;
	}
	
	/*
	 * Returns order data as an array
	 *
	 * @param boolean $validate If you validate, it will fetch data from post
	 * and sanitize & validate that. If false, it will just give you orderArray
	 * with current (should be default or once validated)
	 *
	 * @return array keeps information about order information fields (validation
	 * errors, actual values etc)
	 *
	 */
	public function validateInformation($validate = true) {
		
		$orderArray = Array();
		$orderArray['valid'] = true;
		
		$orderArray['paymentmethod']['value'] = $this->session->orderArray['paymentmethod']['value'];
		$orderArray['paymentmethod']['label'] = $this->_("Payment method");
		
		$defaultData = self::getDefaultData();
		$fields = $defaultData['fields'];
		
		foreach($fields as $key => $field) {
			// If not visible field, remove from array
			if (!$this->$key) continue;
			
			$orderArray['fields'][$key]['label'] = $field['label'];
			$orderArray['fields'][$key]['value'] = '';
			
			if(isset($this->session->orderArray['fields'][$key])) {
				$orderArray['fields'][$key]['value'] = $this->session->orderArray['fields'][$key]['value'];
			}
		}
	

		if ($validate) {
			foreach($orderArray['fields'] as $key => $field) {
				
				$reqKey = $key . 'Required';
				
				$field['value'] = $this->input->post->$key;
				
				$orderArray['fields'][$key]['value'] = $this->sanitizer->text($field['value']);
				
				echo $orderArray['fields'][$key]['value'];
				
				if ($this->$reqKey && $orderArray['fields'][$key]['value'] == '') {
					$orderArray['valid'] = false;
					$orderArray['fields'][$key]['error'] = $this->_("This is a required field");
				}
			}
			
			$orderArray['paymentmethod']['value'] = $this->sanitizer->fieldName($this->input->post->paymentmethod);
			$this->session->set('orderArray', $orderArray);
		}
		

		if (!isset($this->session->orderArray['valid'])) $this->session->set('orderArray', $orderArray);
		
		

		return $orderArray;
		
	}
	/*
	 * return true if success
	 *
	 * Saves order page and it children products to database and destroys session
	 * based shopping cart fron ShoppingCart table
	 *
	 */	
	public function createOrder()
	{
		if ($this->session->orderArray['valid'] == FALSE) throw new WireException("Non-valid order got through.");
		
		$fields = $this->session->orderArray['fields'];
		$fields['paymentmethod']['value'] = $this->session->orderArray['paymentmethod']['value'];
		
		$items = $this->modules->ShoppingCart->getCurrentCart();
		
		$order = new Page();
		$order->template = $this->templates->get('sc-order');
		$order->parent = $this->pages->get("template=admin,name=orders");
		$order->title = $this->_("Order: ") . $fields['firstname']['value'] . ' ' . $fields['lastname']['value'];
		$order->name = $this->sanitizer->pageName($fields['firstname']['value'] . $fields['lastname']['value']) . time();
		$order->sc_firstname = $fields['firstname']['value'];
		$order->sc_lastname = $fields['lastname']['value'];
		$order->email = $fields['email']['value'];
		$order->sc_streetaddress = $fields['streetaddress']['value'];
		$order->sc_city = $fields['city']['value'];
		$order->sc_zip = $fields['zip']['value'];
		$order->sc_country = $fields['country']['value'];
		$order->sc_greetings = $fields['greetings']['value'];
		$order->sc_custom1 = $fields['custom1']['value'];
		$order->sc_custom2 = $fields['custom2']['value'];
		$order->sc_price = $this->modules->ShoppingCart->getTotalSumFromItems($items);
		$order->sc_customer = $this->user;
		$order->sc_paymentmethod = $fields['paymentmethod']['value'];
		$order->sc_session = session_id();
		$order->addStatus(Page::statusUnpublished);
		
		// Default status will be first one there is on /shop/settings/statuses/
		$admin = $this->pages->get($this->config->adminRootPageID);
		$order->sc_status = $this->pages->get("/{$admin->name}/shop/settings/statuses/")->children()->first();
		
		$order->save();
		
		$this->session->set('orderId', $order->id);
		
		foreach ($items as $item) {
			$product = $this->pages->get($item->product_id);
			
			$p = new Page();
			$p->template = $this->templates->get('sc-order-item');
			$p->parent = $order;
			$p->title = $product->title;
			$p->sc_price = $product->sc_price;
			$p->sc_qty = $item->qty;
			$p->sc_product = $product;
			$p->save();
		}
		
		$this->session->remove('orderArray');
		$this->db->query("DELETE FROM ShoppingCart WHERE session_id = '" . session_id() . "'");
		
		return ($order->id) ? true : false;
	}
	
	static public function getModuleConfigInputfields(array $data) {
		// this is a container for fields, basically like a fieldset
		$fields = new InputfieldWrapper();

		// since this is a static function, we can't use $this->modules, so get them from the global wire() function
		$modules = wire('modules');

		$data = array_merge(self::getDefaultData(), $data);
				
		//$urls = $modules->get("InputfieldFieldset");
		//$urls->label = "Url segments";
		//$urls->set('collapsed', Inputfield::collapsedYes);
		
		$field = $modules->get("InputfieldText");
		$field->attr('name', 'confirmationUrlSegment');
		$field->attr('value', $data['confirmationUrlSegment']); 		
		$field->label = "UrlSegment for confirmation step";
		$field->description = "This is only shown in the url. Default: confirmation";		
		//$urls->add($field);
		$fields->add($field);
		
		$field = $modules->get("InputfieldText");
		$field->attr('name', 'paymentUrlSegment');
		$field->attr('value', $data['paymentUrlSegment']); 		
		$field->label = "UrlSegment for payment step";
		$field->description = "This is only shown in the url. Default: payment";
		//$urls->add($field);
		$fields->add($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'completedUrlSegment');
		$field->attr('value', $data['completedUrlSegment']); 		
		$field->label = "UrlSegment for completed step";
		$field->description = "This is only shown in the url. Default: completed";
		//$urls->add($field);
		$fields->add($field);
		
		//$fields->add($urls);
		
		$customer = $modules->get("InputfieldFieldset");
		$customer->label = "Customer fields";
		
		$informationFields = $data['fields'];
		
		// This creates visible / required settings for each information field
		foreach($informationFields as $key => $field) {
			$fs = $modules->get("InputfieldFieldset");
			$fs->label = $field['label'];
			$fs->set('collapsed', Inputfield::collapsedYes);
			
			$f = $modules->get("InputfieldCheckbox");
			$f->name = $key;
			$f->label = "Use this field?";
			$f->value = 1;
			$f->attr('checked', empty($informationFields[$key]['defaults']['visible']) ? '' : 'checked');
			$fs->add($f);
			
			$f = $modules->get("InputfieldCheckbox");
			$name = $key . "Required";
			$f->name = $name;
			$f->label = "Required?";
			$f->value = 1;
			$f->attr('checked', empty($informationFields[$key]['defaults']['required']) ? '' : 'checked');
			$fs->add($f);
			
			$customer->add($fs);
		}
		
		$fields->add($customer);
		
		
		return $fields;
	}
	
	public function install()
	{
	}
	
	public function uninstall()
	{
	}
}
