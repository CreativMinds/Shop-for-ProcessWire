<?php

class ShoppingCheckout extends WireData implements Module, ConfigurableModule
{
	public static function getModuleInfo()
	{
		return array(
			'title' => 'Shopping Checkout',
			'version' => 001,
			'summary' => 'Handles checkout process for PW Shop',
			'singular' => false,
			'autoload' => false,
			'requires' => array(
				"ShoppingCart",
				"ShoppingOrdersManagement"
			)
		);
	}
	
	static public function getDefaultData() {
	   return array(
		   'paymentUrlSegment' => "payment",
		   'completedUrlSegment' => "completed"
		   );
	}

	/**
	 * Populate the default config data
	 *
	 * ProcessWire will automatically overwrite it with anything the user has specifically configured.
	 * This is done in construct() rather than init() because ProcessWire populates config data after
	 * construct(), but before init().
	 *
	 */
	public function __construct() {
	   foreach(self::getDefaultData() as $key => $value) {
		   $this->$key = $value;
	   }
	}
	
	public function init()
	{
		
	}
	
	
	public function ready()
	{
		
	}
	
	public function renderCheckout()
	{
		if(!$this->input->urlSegment1) {
			$out = $this->renderContactForm();
		}
		else if ($this->input->urlSegment1 == $this->paymentUrlSegment) {
			$out = $this->renderPayment();
		}
		else if ($this->input->urlSegment1 == $this->completedUrlSegment) {
			$out = $this->renderCompleted();
		}
		
		return $out;
	}
	
	public function renderContactForm() {
		
		if ($this->input->post->goToPayment) {
			$this->completeOrder(); // This creates new order-page, but doesn't publish it yet. 
			$this->session->redirect("./{$this->paymentUrlSegment}/");
		}
		$out = "<h2>" . $this->_("Fill in your details and complete the order.") . "</h2>";
		$out .= "<form action='./' method='post'>";
		$out .= "<label for='fullname'>" . $this->_("Fullname:") . "</label><br/>";
		$out .= "<input name='fullname' /><br/><br/>";
		$out .= "<label for='email'>" . $this->_("E-Mail:") . "</label><br/>";
		$out .= "<input name='email' /><br/><br/>";
		$out .= "<label for='address'>" . $this->_("Address:") . "</label><br/>";
		$out .= "<textarea name='address'></textarea><br/><br/>";
		$paymentModules = $this->modules->find('className^=Payment');
		if ($paymentModules->count() > 0) {
			$out .= "<select name='paymentmethod'>";
			foreach($paymentModules as $module) {
				$info = $module->getModuleInfo();
				$out .= "<option value='". get_class($module) ."'>".$info['title']."</option>";
			}
			$out .= "</select>";
			$out .= "<input type='submit' name='goToPayment' value='" . $this->_("Complete the order") . "' />";
			
		} else {
			$out .= "<p>No payment methods installed, you should have at least one</p>";
		}
		
		$out .= "</form>";
		
		return $out;
	}
	
	public function renderPayment() {
		// Get latest unpublished order from current user
		$order = $this->pages->get("template=sc-order, sc_customer={$this->user}, status=unpublished, limit=1, sort=-created");
		$paymentmethod = $this->modules->get("{$order->sc_paymentmethod}");
		return $paymentmethod->processPayment($order);
	}
	
	public function renderCompleted() {
		if (!$this->session->orderId) return "Payment failed, session lost";
		
		$orderId = $this->session->orderId;
		$order = $this->pages->get($orderId);
		
		if(!$order->id)
			throw new WireExpection("Payment error, order couldn't be found");
		
		if ($order->is(Page::statusUnpublished)) {
			$out = "Payment failed!";
			$out .= "<a href='../{$this->paymentUrlSegment}/'>Try again?</a>";
			return $out;
		} else {
			return "Thank you: $order->title !";
		}
		
		
		
	}
	
	public function completeOrder()
	{
		// TODO: Sanitize and validate!!!
		$fullname = $this->input->post->fullname;
		$address = $this->input->post->address;
		$email = $this->input->post->email;
		$paymentmethod = $this->input->post->paymentmethod;
		$ordername = $this->sanitizer->pageName($fullname) . time();
		
		$items = $this->modules->ShoppingCart->getCurrentCart();
		
		$order = new Page();
		$order->template = $this->templates->get('sc-order');
		$order->parent = $this->pages->get("template=admin,name=orders");
		$order->title = $this->_("Order: ") . $fullname;
		$order->name = $ordername;
		$order->sc_fullname = $fullname;
		$order->sc_shippingaddress = $address;
		$order->sc_price = $this->modules->ShoppingCart->getTotalSumFromItems($items);
		$order->sc_customer = $this->user;
		$order->sc_paymentmethod = $paymentmethod;
		$order->addStatus(Page::statusUnpublished);
		
		// Default status will be first one there is on /shop/settings/statuses/
		$admin = $this->pages->get($this->config->adminRootPageID);
		$order->sc_status = $this->pages->get("/{$admin->name}/shop/settings/statuses/")->children()->first();
		
		$order->save();
		
		$this->session->set('orderId', $order->id);
		
		foreach ($items as $item) {
			$product = $this->pages->get($item->product_id);
			
			$p = new Page();
			$p->template = $this->templates->get('sc-order-item');
			$p->parent = $order;
			$p->title = $product->title;
			$p->sc_price = $product->sc_price;
			$p->sc_qty = $item->qty;
			$p->sc_product = $product;
			$p->save();
		}
		
		$this->db->query("DELETE FROM ShoppingCart WHERE session_id = '" . session_id() . "'");
	}
	
	static public function getModuleConfigInputfields(array $data) {
		// this is a container for fields, basically like a fieldset
		$fields = new InputfieldWrapper();

		// since this is a static function, we can't use $this->modules, so get them from the global wire() function
		$modules = wire('modules');

		// Populate $data with the default config, because if they've never configured this module before,
		// the $data provided to this function will be empty. Or, if you add new config items in a new version,
		// $data won't have it until they configure it. Best bet is to merge defaults with custom, where
		// custom overwrites the defaults (array_merge).
		$data = array_merge(self::getDefaultData(), $data);

		
		$field = $modules->get("InputfieldText");
		$field->name = "paymentUrlSegment";
		$field->label = "UrlSegment for payment step";
		$field->description = "This is only shown in the url.";
		$field->value = $data['paymentUrlSegment']; 
		$fields->add($field);

		
		$field = $modules->get("InputfieldText");
		$field->name = "completedUrlSegment";
		$field->label = "UrlSegment for completed step";
		$field->description = "This is only shown in the url.";
		$field->value = $data['completedUrlSegment']; 
		$fields->add($field);

		return $fields;
	}
	
	public function install()
	{
	}
	
	public function uninstall()
	{
	}
}
