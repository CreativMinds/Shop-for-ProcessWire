<?php

class ShoppingCheckout extends WireData implements Module, ConfigurableModule
{
	public static function getModuleInfo()
	{
		return array(
			'title' => 'Shopping Checkout',
			'version' => 001,
			'summary' => 'Handles checkout process for PW Shop',
			'singular' => false,
			'autoload' => true,
			'requires' => array(
				"ShoppingCart",
				"ShoppingOrdersManagement"
			)
		);
	}
	
	public $firstnameLabel;
	
	static public function getDefaultData() {
	   return array(
		   'confirmationUrlSegment' => "confirmation",
		   'paymentUrlSegment' => "payment",
		   'completedUrlSegment' => "completed",
		   );
	}
	
	static public function getInformationFieldsArray() {
		$fields = array();
		$fields['firstname']['value'] = '';
		$fields['firstname']['label'] = __('First name');
		$fields['firstname']['visible'] = 1;
		$fields['firstname']['required'] = 1;
		$fields['lastname']['value'] = '';
		$fields['lastname']['label'] = __('Last name');
		$fields['lastname']['visible'] = 1;
		$fields['lastname']['required'] = 1;
		$fields['email']['value'] = '';
		$fields['email']['label'] = __('Email');
		$fields['email']['visible'] = 1;
		$fields['email']['required'] = 1;
		$fields['streetaddress']['value'] = '';
		$fields['streetaddress']['label'] = __('Street address');
		$fields['streetaddress']['visible'] = 1;
		$fields['streetaddress']['required'] = 1;
		$fields['zip']['value'] = '';
		$fields['zip']['label'] = __('ZIP');
		$fields['zip']['visible'] = 0;
		$fields['zip']['required'] = 0;
		$fields['city']['value'] = '';
		$fields['city']['label'] = __('City');
		$fields['city']['visible'] = 1;
		$fields['city']['required'] = 1;
		$fields['country']['value'] = '';
		$fields['country']['label'] = __('Country');
		$fields['country']['visible'] = 0;
		$fields['country']['required'] = 0;
		
		return $fields;
	}

	/**
	 * Populate the default config data
	 *
	 * ProcessWire will automatically overwrite it with anything the user has specifically configured.
	 * This is done in construct() rather than init() because ProcessWire populates config data after
	 * construct(), but before init().
	 *
	 */
	public function __construct() {
	   foreach(self::getDefaultData() as $key => $value) {
		   $this->$key = $value;
	   }
	}
	
	public function init()
	{
		
	}
	
	public function renderCheckout()
	{
		if(!$this->input->urlSegment1) {
			$out = $this->renderInformation();
		}
		else if ($this->input->urlSegment1 == $this->confirmationUrlSegment) {
			$out = $this->renderConfirmation();
		}
		else if ($this->input->urlSegment1 == $this->paymentUrlSegment) {
			$out = $this->renderPayment();
		}
		else if ($this->input->urlSegment1 == $this->completedUrlSegment) {
			$out = $this->renderCompleted();
		}
		
		return $out;
	}
	
	public function renderInformation() {
		if ($this->modules->ShoppingCart->getNumberOfItems() == 0)
			return "<p>" . $this->_("Your shopping cart is empty.") . "</p>";
		
		if (!$this->input->post->submit) {
			$this->validateInformation(false);
		} else {
			$orderArray = $this->validateInformation(true);
			if($orderArray['valid']) {
				$this->session->redirect("./{$this->confirmationUrlSegment}/");	
			}
		}
		
		
		$sid = session_id();
		$order = $this->pages->get("template=sc-order, sc_session={$sid}, status=unpublished, limit=1, sort=-created");
		if ($order->id) {
			$this->session->redirect("./{$this->paymentUrlSegment}/");
		}
		
		
		$out = "<h2>" . $this->_("Fill in your details and complete the order.") . "</h2>";
		$out .= "<form action='./' method='post'>";
		
		$out .= $this->renderInformationFormItems();
		
		$paymentModules = $this->modules->find('className^=Payment');
		if ($paymentModules->count() > 0) {
			$out .= "<select name='paymentmethod'>";
			foreach($paymentModules as $module) {
				$info = $module->getModuleInfo();
				$selected = ($this->session->orderArray['paymentmethod']['value'] == get_class($module)) ? "selected" : "";
				$out .= "<option $selected value='". get_class($module) ."'>".$info['title']."</option>";
			}
			$out .= "</select>";
			$out .= "<input type='submit' name='submit' value='" . $this->_("Complete the order") . "' />";
			
		} else {
			$out .= "<p>No payment methods installed, you should have at least one</p>";
		}
		
		$out .= "</form>";
		
		return $out;
	}
	
	public function renderConfirmation() {
		if ($this->input->post->submit) {
			$this->createOrder();
			$this->session->redirect("../{$this->paymentUrlSegment}/");
		}
		
		$out  = $this->modules->ShoppingCart->renderCart(true);
		$out .= "<form action='./' method='post'>";
		$out .= $this->renderInformationFormItems(true);
		$out .= "<input type='submit' name='submit' value='". $this->_("Pay this order") ."' />";
		$out .= "</form>";
		$out .= "<a href='../'>". $this->_("Go back to edit your information") ."</a>";
		
		return $out;
	}
	
	public function renderPayment() {
		// Get latest unpublished order from current user
		$sid = session_id();
		$order = $this->pages->get("template=sc-order, sc_session={$sid}, status=unpublished, limit=1, sort=-created");
		$paymentmethod = $this->modules->get("{$order->sc_paymentmethod}");
		return $paymentmethod->processPayment($order);
	}
	
	
	
	
	public function renderCompleted() {
		if (!$this->session->orderId) return "Payment failed, session lost";
		
		$orderId = $this->session->orderId;
		$this->session->remove('orderId');

		$order = $this->pages->get($orderId);

		if(!$order->id)
			throw new WireExpection("Payment error, order couldn't be found");
		
		if ($order->is(Page::statusUnpublished)) {
			$out = "Payment cancelled or failed!";
			$out .= "<a href='../{$this->paymentUrlSegment}/'>Try again?</a>";
			return $out;
		} else {
			return "Thank you: $order->title !";
		}
	}
	
	public function renderInformationFormItems($viewOnly = false) {
		$out = '';
		foreach($this->session->orderArray['fields'] as $key => $field) {
			
			if ($field['visible'] == 1) {
				$class  = ($field['required']) ? 'required' : '';
				$class .= (isset($field['error'])) ? ' error' : '';
				
				$out .= "<div class='$class'><label for='$key'>". $field['label'] .":</label> ";
				if (isset($field['error'])) $out .= "<p class='errormsg'>". $field['error'] ."</p>";
				if (!$viewOnly) {
					$out .= "<input class='$class' name='$key' value='". $field['value'] ."' />";
				}
				else {
					$out .= "<span>". $field['value'] ."</span>";
					$out .= "<input type='hidden' name='$key' value='". $field['value'] ."' />";
				}
				$out .= "</div>";
			}
		}
		
		return $out;
	}
	
	
	public function validateInformation($validate = true) {
		
		$orderArray = Array();
		$fields = self::getInformationFieldsArray();
		$orderArray['valid'] = true;
		
		
		foreach($fields as $key => $field) {
			$fields[$key]['value'] = $this->input->post->$key;
		}
		
		$orderArray['fields'] = $fields;
		
		$orderArray['paymentmethod']['value'] = $this->input->post->paymentmethod;
		$orderArray['paymentmethod']['label'] = $this->_("Payment method");
		
		if ($validate) {
			foreach($orderArray['fields'] as $key => $field) {
				
				$orderArray['fields'][$key]['value'] = $this->sanitizer->text($field['value']);
				
				if ($orderArray['fields'][$key]['required'] && $orderArray['fields'][$key]['value'] == '') {
					$orderArray['valid'] = false;
					$orderArray['fields'][$key]['error'] = $this->_("This is a required field");
				}
			}
			$this->session->set('orderArray', $orderArray);
		}
		
		// This makes sure that there is always at least empty values on session
		if (!isset($this->session->orderArray['valid'])) $this->session->set('orderArray', $orderArray);

		return $orderArray;
		
	}
	
	public function createOrder()
	{
		if ($this->session->orderArray['valid'] == FALSE) throw new WireException("Non-valid order got through.");
		
		$fields = $this->session->orderArray['fields'];
		$fields['paymentmethod']['value'] = $this->session->orderArray['paymentmethod']['value'];
		
		$items = $this->modules->ShoppingCart->getCurrentCart();
		
		$order = new Page();
		$order->template = $this->templates->get('sc-order');
		$order->parent = $this->pages->get("template=admin,name=orders");
		$order->title = $this->_("Order: ") . $fields['firstname']['value'] . ' ' . $fields['lastname']['value'];
		$order->name = $this->sanitizer->pageName($fields['firstname']['value'] . $fields['lastname']['value']) . time();
		$order->sc_fullname = $fields['firstname'] . ' ' . $fields['lastname']['value'];
		$order->email = $fields['email']['value'];
		$order->sc_shippingaddress = $fields['streetaddress']['value'];
		$order->sc_price = $this->modules->ShoppingCart->getTotalSumFromItems($items);
		$order->sc_customer = $this->user;
		$order->sc_paymentmethod = $fields['paymentmethod']['value'];
		$order->sc_session = session_id();
		$order->addStatus(Page::statusUnpublished);
		
		// Default status will be first one there is on /shop/settings/statuses/
		$admin = $this->pages->get($this->config->adminRootPageID);
		$order->sc_status = $this->pages->get("/{$admin->name}/shop/settings/statuses/")->children()->first();
		
		$order->save();
		
		$this->session->set('orderId', $order->id);
		
		foreach ($items as $item) {
			$product = $this->pages->get($item->product_id);
			
			$p = new Page();
			$p->template = $this->templates->get('sc-order-item');
			$p->parent = $order;
			$p->title = $product->title;
			$p->sc_price = $product->sc_price;
			$p->sc_qty = $item->qty;
			$p->sc_product = $product;
			$p->save();
		}
		
		$this->session->remove('orderArray');
		$this->db->query("DELETE FROM ShoppingCart WHERE session_id = '" . session_id() . "'");
	}
	
	static public function getModuleConfigInputfields(array $data) {
		// this is a container for fields, basically like a fieldset
		$fields = new InputfieldWrapper();

		// since this is a static function, we can't use $this->modules, so get them from the global wire() function
		$modules = wire('modules');

		$data = array_merge(self::getDefaultData(), $data);
		
		$urls = $modules->get("InputfieldFieldset");
		$urls->label = "Url segments";
		$urls->set('collapsed', Inputfield::collapsedYes);
		
		$field = $modules->get("InputfieldText");
		$field->attr('name', 'confirmationUrlSegment');
		$field->attr('value', $data['confirmationUrlSegment']); 		
		$field->label = "UrlSegment for confirmation step";
		$field->description = "This is only shown in the url.";		
		$urls->add($field);
		
		$field = $modules->get("InputfieldText");
		$field->name = "paymentUrlSegment";
		$field->label = "UrlSegment for payment step";
		$field->description = "This is only shown in the url.";
		$field->value = $data['paymentUrlSegment']; 
		$urls->add($field);

		$field = $modules->get("InputfieldText");
		$field->name = "completedUrlSegment";
		$field->label = "UrlSegment for completed step";
		$field->description = "This is only shown in the url.";
		$field->value = $data['completedUrlSegment']; 
		$urls->add($field);
		
		$fields->add($urls);
		
		
		$customer = $modules->get("InputfieldFieldset");
		$customer->label = "Customer fields";
		
		$informationFields = self::getInformationFieldsArray();
		
		// This creates visible / required settings for each information field
		foreach($informationFields as $key => $field) {
			$fs = $modules->get("InputfieldFieldset");
			$fs->label = $field['label'];
			$fs->set('collapsed', Inputfield::collapsedYes);
			
			$f = $modules->get("InputfieldCheckbox");
			$name = $key . "Visible";
			$f->name = $name;
			$f->label = "Use this field?";
			$f->value = 1;
			$f->attr('checked', empty($data[$name]) ? '' : 'checked');
			$fs->add($f);
			
			$f = $modules->get("InputfieldCheckbox");
			$name = $key . "Required";
			$f->name = $name;
			$f->label = "Required?";
			$f->value = 1;
			$f->attr('checked', empty($data[$name]) ? '' : 'checked');
			$fs->add($f);
			
			$customer->add($fs);
		}
		
		$fields->add($customer);
		
		
		return $fields;
	}
	
	public function install()
	{
	}
	
	public function uninstall()
	{
	}
}
