<?php

class ShopCart extends WireData implements Module {

	public static function getModuleInfo() {

		return array(
			'title' => 'Shopping Cart',
			'version' => 001,
			'summary' => 'Simple shopping cart for PW',
			'singular' => false,
			'autoload' => true
			);
	}

	public function init() {
		
		//if(!$t = $templates->get('user')) throw new WireException("Missing system template: 'user'");
		//if(!$t = $this->templates->get('sc-order')) throw new WireException("Missing required shopping card template: 'sc-order'");
		//$parentID = $this->pages->get('template=admin, name=shopping-cart-orders')->id;
		//$orders = new PagesType($t, $parentID); 
		//Wire::setFuel('orders', $orders);
	}

	public function ready() {
		if($this->input->post->sc_product_id) {
			$product_id = (int) $this->input->post->sc_product_id;
			$qty = (int) $this->input->post->sc_qty;
			$this->addProductToCart($this->pages->get($product_id), $qty);
			$this->session->redirect("./");
		}
	}

	public function renderAddToCart(Page $product) {
		if (!(is_numeric($product->sc_price)) || $product->sc_price <= 0) return false;
		
		$checkout_url = $this->pages->get('template=sc-checkout, include=all')->url;
		if (!$checkout_url) $checkout_url = "./";

		$out  = "<form method='post' action='$checkout_url'>";
		$out .= "<input type='hidden' value='{$product->id}' name='sc_product_id' />";
		$out .= "<input type='number' name='sc_qty' value='1'/>";
		$out .= "<input type='submit' value='". $this->_("Add to cart") . "' />";
		$out .= "</form>";

		return $out;
	}
	
	public function addProductToCart($product, $qty = 1) {

		$items = $this->getCurrentCart();
		$qty = (int) $qty;
		
		if ($qty < 0) return;

		// There is not a single product available
		if (count($items) == 0) {
			$new_item = new stdClass;
			$new_item->product_id = $product->id;
			$new_item->qty = $qty;
			if ($new_item->qty > 0)
				$items[] = $new_item;
		} else {
			$product_found = false;
			foreach ($items as $key => $item) {
				if ($item->product_id === $product->id) {
					$item->qty = $item->qty + $qty;
					if ($qty === 0) {
						unset($items[$key]);
						$items = array_values($items);
					}
					$product_found = true;
					break;
				}
			}
			if(!$product_found) {
				$new_item = new stdClass;
				$new_item->product_id = $product->id;
				$new_item->qty = $qty;
				if ($new_item->qty > 0)
					$items[] = $new_item;
			}
		}

		$total_sum = $this->getTotalSumFromItems($items);
		$items = json_encode($items);

		// Update cart to db or insert new row if there isn't
		$update = $this->db->query("INSERT INTO {$this->className} SET items = '$items', total_sum = $total_sum, session_id = '". session_id() ."' ON DUPLICATE KEY UPDATE items = '$items', total_sum = $total_sum");

	}

	public function removeProductFromCart($product) {
		// If you add 0 qty, it will remove the whole item from cart
		$this->addProductToCart($product, 0);
	}

	public function updateCart($contents) {

		$items = array();

		foreach($contents as $product_id => $qty) {
			$new_item = new stdClass;
			$new_item->product_id = (int) $product_id;
			$new_item->qty = (int) $qty;
			if($new_item->qty > 0)
				$items[] = $new_item;
		}


		$total_sum = $this->getTotalSumFromItems($items);
		$items = json_encode($items);

		$update = $this->db->query("UPDATE {$this->className} SET items = '$items', total_sum = $total_sum WHERE session_id = '". session_id() ."'");
		return $update;

	}

	public function getTotalSumFromItems($items) {
		$total_sum = 0;
		if (count($items) < 1) return $total_sum;

		foreach($items as $item) {
			$product = $this->pages->get($item->product_id);
			$total_price = $item->qty * $product->sc_price;
			$total_sum = $total_sum + $total_price;
		}
		return $total_sum;
	}

	public function getCurrentCart() {
		$sid = session_id();
		$result = $this->db->query("SELECT items FROM {$this->className} WHERE session_id = '$sid' ORDER BY last_modified LIMIT 1");
		if($result->num_rows === 0) {
			return array();
		} else {
			list($items) = $result->fetch_array();
			return json_decode($items);
		}
	}
	
	public function getTotalSumFromCart() {
		$items = $this->getCurrentCart();
		return $this->getTotalSumFromItems($items);
	}
	
	public function getNumberOfItems() {
		return count($this->getCurrentCart());
	}

	public function install() {
		
		if (!$this->fields->get('sc_price')) {
			$f = new Field();
			$f->type = $this->modules->get("FieldtypeFloat");
			$f->name = 'sc_price';
			$f->precision = 2;
			$f->label = 'Price of the product';
			$f->save();
		}

		$sql = <<< _END

		CREATE TABLE {$this->className} (
			session_id VARCHAR(255) NULL,
			last_modified TIMESTAMP NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
			items TEXT NULL,
			total_sum FLOAT(10,2) NULL,
			PRIMARY KEY (`session_id`) )
		  ENGINE = MyISAM DEFAULT CHARSET=utf8;

_END;

		$this->db->query($sql);
	}

	public function uninstall() {
		$this->db->query("DROP TABLE {$this->className}");
	}
}
